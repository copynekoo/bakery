/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as OrdersRouteImport } from './routes/orders'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EmployeesIndexRouteImport } from './routes/employees/index'
import { Route as EmployeesDashboardRouteImport } from './routes/employees/dashboard'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesIndexRoute = EmployeesIndexRouteImport.update({
  id: '/employees/',
  path: '/employees/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesDashboardRoute = EmployeesDashboardRouteImport.update({
  id: '/employees/dashboard',
  path: '/employees/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/orders': typeof OrdersRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/employees/dashboard': typeof EmployeesDashboardRoute
  '/employees': typeof EmployeesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/orders': typeof OrdersRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/employees/dashboard': typeof EmployeesDashboardRoute
  '/employees': typeof EmployeesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/orders': typeof OrdersRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/employees/dashboard': typeof EmployeesDashboardRoute
  '/employees/': typeof EmployeesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/orders'
    | '/profile'
    | '/register'
    | '/employees/dashboard'
    | '/employees'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/orders'
    | '/profile'
    | '/register'
    | '/employees/dashboard'
    | '/employees'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/orders'
    | '/profile'
    | '/register'
    | '/employees/dashboard'
    | '/employees/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  OrdersRoute: typeof OrdersRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  EmployeesDashboardRoute: typeof EmployeesDashboardRoute
  EmployeesIndexRoute: typeof EmployeesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees/': {
      id: '/employees/'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees/dashboard': {
      id: '/employees/dashboard'
      path: '/employees/dashboard'
      fullPath: '/employees/dashboard'
      preLoaderRoute: typeof EmployeesDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  OrdersRoute: OrdersRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  EmployeesDashboardRoute: EmployeesDashboardRoute,
  EmployeesIndexRoute: EmployeesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
